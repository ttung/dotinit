#!/bin/bash

if [ -z "${TERM}" ] ||
    [ "${TERM}" == "dumb" ]; then
    eval `tset -s - | sed -e '1d'`
fi

if [ "${TERM}" == "screen" ] ||
    [ "${TERM}" == "screen-w" ]; then
    TERMTYPE=screen
elif [ "${TERM}" == "xterm-color" ] ||
      [ "${TERM}" == "xterm-256color" ]; then
    TERMTYPE=xterm
elif [ "${TERM}" == "emacs" ]; then
    TERMTYPE=dumb
elif [ ! -z "${TERM}" ]; then
    TERMTYPE="${TERM}"
else
    TERMTYPE=dumb
fi

stty erase '^?' kill undef intr '^C' stop '^O' werase undef

if [ "${TERMTYPE}" != "dumb" ]; then
    bind '"\e[5~":history-search-backward'
    bind '"\e[6~":history-search-forward'
    bind C-f:forward-word
    bind C-b:backward-word
    bind M-f:forward-char
    bind M-b:backward-char
    bind C-u:kill-whole-line
    bind C-w:kill-region

    # readline variables
    bind "set show-all-if-ambiguous on"
    bind "set page-completions off"
    bind "set mark-symlinked-directories on"
fi

if [ ! -z "${DISPLAY}" ] &&
    [ -z "${SSH_DISPLAY}" ]; then
    SSH_DISPLAY="${DISPLAY}"
fi

export EDITOR=emacs
export BLOCKSIZE=K
export CVS_RSH=ssh
export RSYNC_RSH=ssh

if [ "${TERMTYPE}" == dumb ]; then
    export PAGER="cat"
else
    export PAGER="less -meiR"
fi

# set the prompt.
if [ ! -z "`type -t tput`" ]; then
    t_bold_cmd="\[`tput bold`\]"
    t_unbold_cmd="\[`tput sgr0`\]"
fi

if [ $UID -eq 0 ]; then
    t_prompt_end='%'
else
    t_prompt_end='>'
fi

t_prompt_machname=`echo ${HOST} | sed 's/\..*//'`

if [ "$TERMTYPE" == "xterm" ] ||
    [ "$TERMTYPE" == "screen" ]; then
    PS1="\[\e]0;[${t_prompt_machname}]:\w${t_prompt_end}\a\][${t_prompt_machname}]:${t_bold_cmd}\w${t_unbold_cmd}"'$(_dotfiles_scm_info ":%s")'"${t_prompt_end} "
else
    PS1="[${t_prompt_machname}]:${t_bold_cmd}\w${t_unbold_cmd}${t_prompt_end} "
fi

# merging history
if [ ! -z "`type -t sqlite_history.py`" ]; then
    function sqlite_history() {
        local old_HISTTIMEFORMAT="${HISTTIMEFORMAT}"
        HISTTIMEFORMAT='***** %s ***** '
        new_history_file=`history | sqlite_history.py`
        HISTTIMEFORMAT="${old_HISTTIMEFORMAT}"

        if [ ! -z "${new_history_file}" ]; then
            history -c -r $new_history_file
            rm -f $new_history_file
        fi
    }
    PROMPT_COMMAND=sqlite_history
    unset HISTFILE
else
    PROMPT_COMMAND='history -a; history -n'
fi
HISTCONTROL=erasedups:ignorespace
HISTFILESIZE=5000
HISTTIMEFORMAT=' %F %T '
shopt -s histappend cmdhist lithist

set -o notify
set -o noclobber
IGNOREEOF=2

function watch() {
    IFS=
    sleeptime=1
    while getopts ":s:" o; do
        case "${o}" in
            s)
                sleeptime=${OPTARG}
                ;;
        esac
    done
    shift $((OPTIND-1))

    while true; do
        output=$($*)
        clear
        echo "${output}"
        sleep $sleeptime
    done
}

function tmux () {
    declare SAS

    if [ ! -d ${HOME}/tmp ]; then
        mkdir -p ${HOME}/tmp
    fi

    if [ "${TERMTYPE}" != "screen" ] && [ "${!SSH_AUTH_SOCK[@]}" ]; then
        ln -sf ${SSH_AUTH_SOCK} ${HOME}/tmp/${USER}-agent-screen
        SAS=${HOME}/tmp/${USER}-agent-screen
    fi

    SSH_AUTH_SOCK="${SAS}" command tmux $@
}

# clean up.
unset t_bold_cmd t_unbold_cmd
unset t_prompt_end
unset t_prompt_machname
